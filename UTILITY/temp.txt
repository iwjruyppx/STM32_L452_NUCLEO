
#if 0
int task1_state = 0;
int time = 0;
int sizesss = 0;
int LOGE(const char * format,...){
    va_list argList;
    CWM_CMD_t data;

    va_start(argList,format);
    vsnprintf(data.string,sizeof(data.string),format,argList);
    va_end(argList);
    
    sizesss = sizeof(data.string);
    data.cmd = CWM_CMD_SCREEN_WRITE_AUTO_NEW_LINE;
    CWM_CMD_QUEUE_SEND(&data);
    
    data.cmd = CWM_CMD_SCREEN_UPDATE;
    CWM_CMD_QUEUE_SEND(&data);
    return 0;
}
#endif

#if 0
static void statemachine(void)
{
    CWM_CMD_t data;
 
    switch(task1_state)
    {
#if 0
        case 0 :
            data.cmd = CWM_CMD_SCREEN_INIT;
            CWM_CMD_QUEUE_SEND(&data);
            break;
        case 1 :
            data.cmd = CWM_CMD_SCREEN_ON;
            CWM_CMD_QUEUE_SEND(&data);
            
            data.cmd = CWM_CMD_USART_LISTEN;
            CWM_CMD_QUEUE_SEND(&data);
            break;
#else
        case 0 :
            data.cmd = CWM_CMD_USART_LISTEN;
            CWM_CMD_QUEUE_SEND(&data);
            break;
            
#endif
        default:
            time = gTimestamp/1000;
        //    LOGE("CurrentT:%d\n",time);
            CWM_MSG_QUEUE_LISTEN();
            
            break;
    }
    task1_state++;
}
#endif


#if 0
extern ModuleHc06Class_t BLE_HC06S;
BLE_HC06S.setCmd(&BLE_HC06S,CMD_HC06_SET_BAUD_230400, NULL);
#endif